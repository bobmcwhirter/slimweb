<?xml version="1.0" encoding="UTF-8"?>
<!--
  vi:ts=3:sw=3:expandtab
-->
<deployment xmlns="urn:jboss:bean-deployer:2.0">
   <!-- Install the default CEMFBuilder, this will build a JPA 1 compliant
        container entity manager factory. -->
   <bean name="CEMFBuilder" class="org.jboss.as.jpa.scanner.HackCEMFBuilder"/>

   <bean name="DataSourceDependencyResolver" class="org.jboss.as.jpa.resolvers.JBossASDataSourceDependencyResolver"/>
   
   <bean name="JavaEEModuleInformer" class="org.jboss.as.javaee.SimpleJavaEEModuleInformer"/>
   
   <bean name="JBossSearchStrategy" class="org.jboss.jpa.resolvers.strategy.JBossSearchStrategy"/>
   
   <bean name="SpecCompliantSearchStrategy" class="org.jboss.jpa.resolvers.strategy.SpecCompliantSearchStrategy"/>
   
   <!--
      Can be DefaultPersistenceUnitDependencyResolver for spec compliant resolving, 
      InterApplicationPersistenceUnitDependencyResolver for resolving beyond EARs,
      or DynamicPersistencePersistenceUnitDependencyResolver which allows configuration via JMX.
   -->
   <bean name="PersistenceUnitDependencyResolver" class="org.jboss.jpa.resolvers.DynamicPersistenceUnitDependencyResolver"/>
   
   <bean name="XPCResolver" class="org.jboss.ejb3.stateful.EJB3XPCResolver"/>
   
   <bean name="PersistenceParsingDeployer" class="org.jboss.jpa.deployers.PersistenceParsingDeployer">
     <property name="filter">
       <bean class="org.jboss.deployers.spi.structure.MetaDataTypeFilter">
         <constructor factoryClass="org.jboss.deployment.MetaDataTypeFilterFactory" factoryMethod="getAll"/>
       </bean>
     </property>
   </bean>

   <bean name="PersistenceDeployer" class="org.jboss.jpa.deployers.PersistenceDeployer"/>

   <bean name="PUHackDeployer" class="org.jboss.deployment.PUHackDeployer">
     <constructor>
       <parameter><inject bean="PersistenceUnitDeployer"/></parameter>
     </constructor>
   </bean>

  <bean name="PersistenceUnitDeployer" class="org.jboss.jpa.deployers.PersistenceUnitDeployer" autowire-candidate="false">
      <property name="defaultPersistenceProperties">
         <map keyClass="java.lang.String" valueClass="java.lang.String">
            <entry>
               <key>hibernate.ejb.resource_scanner</key>
               <value>org.jboss.as.jpa.scanner.HackTLScanner</value>
            </entry>
            <entry>
               <key>hibernate.transaction.manager_lookup_class</key>
               <value>org.hibernate.transaction.JBossTransactionManagerLookup</value>
            </entry>
            <!--entry>
               <key>hibernate.connection.release_mode</key>
               <value>after_statement</value>
            </entry-->
            <!--entry>
               <key>hibernate.transaction.flush_before_completion</key>
               <value>false</value>
            </entry-->
            <!--entry>
               <key>hibernate.transaction.auto_close_session</key>
               <value>false</value>
            </entry-->
            <!--entry>
               <key>hibernate.query.factory_class</key>
               <value>org.hibernate.hql.ast.ASTQueryTranslatorFactory</value>
            </entry-->
            <!--entry>
               <key>hibernate.hbm2ddl.auto</key>
               <value>create-drop</value>
            </entry-->
            <entry>
               <key>hibernate.cache.provider_class</key>
               <value>org.hibernate.cache.HashtableCacheProvider</value>
            </entry>
            <!-- Clustered cache with Infinispan -->
            <!--entry>
               <key>hibernate.cache.region.factory_class</key>
               <value>org.hibernate.cache.infinispan.JndiInfinispanRegionFactory</value>
            </entry>
            <entry>
               <key>hibernate.cache.infinispan.cachemanager</key>
               <value>java:CacheManager/entity</value>
            </entry-->
            <!--entry>
               <key>hibernate.cache.infinispan.entity.cfg</key>
               <value>entity</value>
            </entry-->
            <!--entry>
               <key>hibernate.cache.infinispan.collection.cfg</key>
               <value>entity</value>
            </entry-->
            <!--entry>
               <key>hibernate.cache.infinispan.query.cfg</key>
               <value>local-query</value>
            </entry-->
            <!--entry>
               <key>hibernate.dialect</key>
               <value>org.hibernate.dialect.HSQLDialect</value>
            </entry-->
            <entry>
               <key>hibernate.jndi.java.naming.factory.initial</key>
               <value>org.jnp.interfaces.NamingContextFactory</value>
            </entry>
            <entry>
               <key>hibernate.jndi.java.naming.factory.url.pkgs</key>
               <value>org.jboss.naming:org.jnp.interfaces</value>
            </entry>
            <entry>
               <key>hibernate.bytecode.use_reflection_optimizer</key>
               <value>false</value>
            </entry>
            <!-- I don't think this is honored, but EJB3Deployer uses it -->
            <entry>
               <key>hibernate.bytecode.provider</key>
               <value>javassist</value>
            </entry>
            <!-- Setting to indicate whether or not to use the new IdentifierGenerator 
                 implementations which are used for AUTO, TABLE and SEQUENCE. The new generators 
                 are more efficient and relevant to the JPA 2 specification semantic. -->
            <entry>
               <key>hibernate.id.new_generator_mappings</key>
               <value>true</value>
            </entry>
         </map>
      </property>
   </bean>
   <!-- Resource provider for PersistenceUnit reference -->
   <bean name="org.jboss.switchboard.PersistenceUnitResourceProvider" class="org.jboss.jpa.deployers.switchboard.PersistenceUnitResourceProvider">
        <constructor>
            <parameter><inject bean="PersistenceUnitDependencyResolver"/></parameter>
        </constructor>
   </bean>
   
</deployment>
